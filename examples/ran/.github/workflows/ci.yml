name: RAN Intelligence Platform CI/CD

on:
  push:
    branches: [main, develop]
    paths:
      - 'examples/ran/**'
      - '.github/workflows/ci.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'examples/ran/**'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Code quality checks
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          override: true

      - name: Install protobuf compiler
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            examples/ran/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run rustfmt
        working-directory: examples/ran
        run: cargo fmt --all -- --check

      - name: Run clippy
        working-directory: examples/ran
        run: cargo clippy --all-targets --all-features -- -D warnings

  # Build and test
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable, beta]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: ran_intelligence_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          override: true

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler libssl-dev pkg-config

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            examples/ran/target
          key: ${{ runner.os }}-${{ matrix.rust }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build
        working-directory: examples/ran
        run: cargo build --verbose --all-features

      - name: Run tests
        working-directory: examples/ran
        run: cargo test --verbose --all-features
        env:
          DATABASE_URL: postgresql://postgres:password@localhost:5432/ran_intelligence_test

      - name: Run integration tests
        working-directory: examples/ran
        run: cargo test --test '*' --verbose
        env:
          DATABASE_URL: postgresql://postgres:password@localhost:5432/ran_intelligence_test

  # Security audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        working-directory: examples/ran
        run: cargo audit

  # Build Docker images
  docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    strategy:
      matrix:
        service:
          - pfs-data
          - pfs-feat  
          - pfs-core
          - pfs-reg
          - opt-mob
          - opt-eng
          - opt-res
          - asa-int
          - asa-5g
          - asa-qos
          - dni-clus
          - dni-cap
          - dni-slice

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/ran-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Determine Dockerfile
        id: dockerfile
        run: |
          if [[ "${{ matrix.service }}" == pfs-* ]]; then
            echo "dockerfile=docker/Dockerfile.platform-foundation" >> $GITHUB_OUTPUT
          elif [[ "${{ matrix.service }}" == opt-* ]]; then
            echo "dockerfile=docker/Dockerfile.predictive-optimization" >> $GITHUB_OUTPUT
          elif [[ "${{ matrix.service }}" == asa-* ]]; then
            echo "dockerfile=docker/Dockerfile.service-assurance" >> $GITHUB_OUTPUT
          elif [[ "${{ matrix.service }}" == dni-* ]]; then
            echo "dockerfile=docker/Dockerfile.network-intelligence" >> $GITHUB_OUTPUT
          fi

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: examples/ran
          file: examples/ran/${{ steps.dockerfile.outputs.dockerfile }}
          build-args: |
            SERVICE_NAME=${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Performance benchmarks
  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler libssl-dev pkg-config

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            examples/ran/target
          key: ${{ runner.os }}-bench-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run benchmarks
        working-directory: examples/ran
        run: cargo bench --all-features

      - name: Store benchmark results
        uses: benchmark-action/github-action-benchmark@v1
        with:
          tool: 'cargo'
          output-file-path: examples/ran/target/criterion/report/index.html
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true

  # Deployment to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add staging deployment commands here
          # Example: kubectl apply -f k8s/staging/

  # Deployment to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker, benchmark]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add production deployment commands here
          # Example: kubectl apply -f k8s/production/

  # Generate documentation
  docs:
    name: Generate Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler

      - name: Generate documentation
        working-directory: examples/ran
        run: cargo doc --all-features --no-deps

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: examples/ran/target/doc
          destination_dir: ran-docs