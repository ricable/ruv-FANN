syntax = "proto3";

package pfs.data.v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

// Data Ingestion Service for file-based batch processing
service DataIngestionService {
  // Start ingestion of files from a directory
  rpc StartIngestion(StartIngestionRequest) returns (StartIngestionResponse);
  
  // Stop ingestion
  rpc StopIngestion(StopIngestionRequest) returns (google.protobuf.Empty);
  
  // Get ingestion status
  rpc GetIngestionStatus(GetIngestionStatusRequest) returns (GetIngestionStatusResponse);
  
  // Process a single file
  rpc ProcessFile(ProcessFileRequest) returns (ProcessFileResponse);
  
  // Get processing metrics
  rpc GetMetrics(google.protobuf.Empty) returns (GetMetricsResponse);
  
  // Health check
  rpc Health(google.protobuf.Empty) returns (HealthResponse);
  
  // List processed files
  rpc ListProcessedFiles(ListProcessedFilesRequest) returns (ListProcessedFilesResponse);
}

// Request to start ingestion
message StartIngestionRequest {
  string input_directory = 1;
  string output_directory = 2;
  IngestionConfig config = 3;
}

// Response from starting ingestion
message StartIngestionResponse {
  string ingestion_id = 1;
  string status = 2;
  google.protobuf.Timestamp started_at = 3;
}

// Request to stop ingestion
message StopIngestionRequest {
  string ingestion_id = 1;
}

// Request for ingestion status
message GetIngestionStatusRequest {
  string ingestion_id = 1;
}

// Response with ingestion status
message GetIngestionStatusResponse {
  string ingestion_id = 1;
  string status = 2;
  IngestionMetrics metrics = 3;
  repeated FileProcessingResult processed_files = 4;
  google.protobuf.Timestamp started_at = 5;
  google.protobuf.Timestamp updated_at = 6;
}

// Request to process a single file
message ProcessFileRequest {
  string input_path = 1;
  string output_path = 2;
  FileProcessingConfig config = 3;
}

// Response from file processing
message ProcessFileResponse {
  string file_id = 1;
  FileProcessingResult result = 2;
}

// Request to list processed files
message ListProcessedFilesRequest {
  string ingestion_id = 1;
  int32 page_size = 2;
  string page_token = 3;
  string status_filter = 4;
}

// Response with processed files list
message ListProcessedFilesResponse {
  repeated FileProcessingResult files = 1;
  string next_page_token = 2;
  int32 total_count = 3;
}

// Ingestion configuration
message IngestionConfig {
  uint32 batch_size = 1;
  uint32 max_concurrent_files = 2;
  double max_error_rate = 3;
  uint32 row_group_size = 4;
  string compression = 5;
  bool watch_directory = 6;
  repeated string file_patterns = 7;
  SchemaConfig schema_config = 8;
}

// File processing configuration
message FileProcessingConfig {
  string input_format = 1;
  string output_format = 2;
  SchemaConfig schema_config = 3;
  bool validate_schema = 4;
  bool skip_header = 5;
  string delimiter = 6;
  string quote_char = 7;
  string escape_char = 8;
}

// Schema configuration for data normalization
message SchemaConfig {
  string timestamp_column = 1;
  string cell_id_column = 2;
  string kpi_name_column = 3;
  string kpi_value_column = 4;
  string ue_id_column = 5;
  string sector_id_column = 6;
  map<string, string> column_mappings = 7;
  repeated string required_columns = 8;
}

// File processing result
message FileProcessingResult {
  string file_id = 1;
  string input_path = 2;
  string output_path = 3;
  string status = 4;
  uint64 input_rows = 5;
  uint64 output_rows = 6;
  uint64 processed_bytes = 7;
  uint64 error_count = 8;
  double error_rate = 9;
  uint64 processing_time_ms = 10;
  uint64 memory_usage_mb = 11;
  google.protobuf.Timestamp started_at = 12;
  google.protobuf.Timestamp completed_at = 13;
  string error_message = 14;
  map<string, string> metadata = 15;
}

// Ingestion metrics
message IngestionMetrics {
  uint64 total_files_discovered = 1;
  uint64 total_files_processed = 2;
  uint64 total_files_failed = 3;
  uint64 total_rows_processed = 4;
  uint64 total_bytes_processed = 5;
  uint64 total_errors = 6;
  double average_processing_time_ms = 7;
  double throughput_rows_per_sec = 8;
  double error_rate = 9;
  uint64 memory_usage_mb = 10;
  uint32 active_workers = 11;
}

// Service metrics response
message GetMetricsResponse {
  IngestionMetrics overall_metrics = 1;
  map<string, IngestionMetrics> ingestion_metrics = 2;
  google.protobuf.Timestamp collected_at = 3;
}

// Health check response
message HealthResponse {
  string status = 1;
  string version = 2;
  uint64 uptime_seconds = 3;
  map<string, ComponentHealth> components = 4;
  google.protobuf.Timestamp timestamp = 5;
}

// Component health information
message ComponentHealth {
  string name = 1;
  string status = 2;
  string details = 3;
  map<string, double> metrics = 4;
  google.protobuf.Timestamp last_check = 5;
}